
SPI_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe8  08001fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08001ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08001ffc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065a4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c8  00000000  00000000  000265d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  000278a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  00028050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160ee  00000000  00000000  00028750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005d8e  00000000  00000000  0003e83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f48f  00000000  00000000  000445cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3a5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e80  00000000  00000000  000c3ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fa4 	.word	0x08001fa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001fa4 	.word	0x08001fa4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fdc6 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xa4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x5a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0x9a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xdc>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0x90>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000486:	4a89      	ldr	r2, [pc, #548]	; (80006ac <HAL_GPIO_Init+0x280>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xae>
 800048c:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x280>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x74>
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x284>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000498:	4a86      	ldr	r2, [pc, #536]	; (80006b4 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <HAL_GPIO_Init+0x28c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004a6:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x290>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xec>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0xf0>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0xfe>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x104>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x298>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x19e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x19a>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x196>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x192>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005dc:	493a      	ldr	r1, [pc, #232]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4938      	ldr	r1, [pc, #224]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4933      	ldr	r1, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4924      	ldr	r1, [pc, #144]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4915      	ldr	r1, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	f47f aed0 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
 80006ec:	4613      	mov	r3, r2
 80006ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006f0:	787b      	ldrb	r3, [r7, #1]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006f6:	887a      	ldrh	r2, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006fc:	e003      	b.n	8000706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	041a      	lsls	r2, r3, #16
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	611a      	str	r2, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000722:	887a      	ldrh	r2, [r7, #2]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4013      	ands	r3, r2
 8000728:	041a      	lsls	r2, r3, #16
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	43d9      	mvns	r1, r3
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	400b      	ands	r3, r1
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	611a      	str	r2, [r3, #16]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	4013      	ands	r3, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f806 	bl	8000774 <HAL_GPIO_EXTI_Callback>
  }
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010400 	.word	0x40010400

08000774 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e26c      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f000 8087 	beq.w	80008b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a8:	4b92      	ldr	r3, [pc, #584]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f003 030c 	and.w	r3, r3, #12
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d00c      	beq.n	80007ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b4:	4b8f      	ldr	r3, [pc, #572]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 030c 	and.w	r3, r3, #12
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d112      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
 80007c0:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007cc:	d10b      	bne.n	80007e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ce:	4b89      	ldr	r3, [pc, #548]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d06c      	beq.n	80008b4 <HAL_RCC_OscConfig+0x12c>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d168      	bne.n	80008b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e246      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ee:	d106      	bne.n	80007fe <HAL_RCC_OscConfig+0x76>
 80007f0:	4b80      	ldr	r3, [pc, #512]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a7f      	ldr	r2, [pc, #508]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e02e      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10c      	bne.n	8000820 <HAL_RCC_OscConfig+0x98>
 8000806:	4b7b      	ldr	r3, [pc, #492]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a7a      	ldr	r2, [pc, #488]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b78      	ldr	r3, [pc, #480]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a77      	ldr	r2, [pc, #476]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e01d      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000828:	d10c      	bne.n	8000844 <HAL_RCC_OscConfig+0xbc>
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a71      	ldr	r2, [pc, #452]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a6e      	ldr	r2, [pc, #440]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800083c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e00b      	b.n	800085c <HAL_RCC_OscConfig+0xd4>
 8000844:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a6a      	ldr	r2, [pc, #424]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800084a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a67      	ldr	r2, [pc, #412]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d013      	beq.n	800088c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000864:	f7ff fcca 	bl	80001fc <HAL_GetTick>
 8000868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fcc6 	bl	80001fc <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e1fa      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f0      	beq.n	800086c <HAL_RCC_OscConfig+0xe4>
 800088a:	e014      	b.n	80008b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800088c:	f7ff fcb6 	bl	80001fc <HAL_GetTick>
 8000890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000892:	e008      	b.n	80008a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000894:	f7ff fcb2 	bl	80001fc <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	2b64      	cmp	r3, #100	; 0x64
 80008a0:	d901      	bls.n	80008a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008a2:	2303      	movs	r3, #3
 80008a4:	e1e6      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a6:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f0      	bne.n	8000894 <HAL_RCC_OscConfig+0x10c>
 80008b2:	e000      	b.n	80008b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d063      	beq.n	800098a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008c2:	4b4c      	ldr	r3, [pc, #304]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00b      	beq.n	80008e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ce:	4b49      	ldr	r3, [pc, #292]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 030c 	and.w	r3, r3, #12
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	d11c      	bne.n	8000914 <HAL_RCC_OscConfig+0x18c>
 80008da:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d116      	bne.n	8000914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e6:	4b43      	ldr	r3, [pc, #268]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <HAL_RCC_OscConfig+0x176>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d001      	beq.n	80008fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e1ba      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fe:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4939      	ldr	r1, [pc, #228]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800090e:	4313      	orrs	r3, r2
 8000910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000912:	e03a      	b.n	800098a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d020      	beq.n	800095e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <HAL_RCC_OscConfig+0x270>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000922:	f7ff fc6b 	bl	80001fc <HAL_GetTick>
 8000926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000928:	e008      	b.n	800093c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800092a:	f7ff fc67 	bl	80001fc <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	2b02      	cmp	r3, #2
 8000936:	d901      	bls.n	800093c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000938:	2303      	movs	r3, #3
 800093a:	e19b      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f0      	beq.n	800092a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4927      	ldr	r1, [pc, #156]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000958:	4313      	orrs	r3, r2
 800095a:	600b      	str	r3, [r1, #0]
 800095c:	e015      	b.n	800098a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <HAL_RCC_OscConfig+0x270>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000964:	f7ff fc4a 	bl	80001fc <HAL_GetTick>
 8000968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096a:	e008      	b.n	800097e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800096c:	f7ff fc46 	bl	80001fc <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d901      	bls.n	800097e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800097a:	2303      	movs	r3, #3
 800097c:	e17a      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f0      	bne.n	800096c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	2b00      	cmp	r3, #0
 8000994:	d03a      	beq.n	8000a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d019      	beq.n	80009d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_RCC_OscConfig+0x274>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc2a 	bl	80001fc <HAL_GetTick>
 80009a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009aa:	e008      	b.n	80009be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fc26 	bl	80001fc <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d901      	bls.n	80009be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e15a      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_RCC_OscConfig+0x26c>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f0      	beq.n	80009ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 fada 	bl	8000f84 <RCC_Delay>
 80009d0:	e01c      	b.n	8000a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_RCC_OscConfig+0x274>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d8:	f7ff fc10 	bl	80001fc <HAL_GetTick>
 80009dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009de:	e00f      	b.n	8000a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fc0c 	bl	80001fc <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d908      	bls.n	8000a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e140      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	42420000 	.word	0x42420000
 80009fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a00:	4b9e      	ldr	r3, [pc, #632]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e9      	bne.n	80009e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80a6 	beq.w	8000b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1e:	4b97      	ldr	r3, [pc, #604]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10d      	bne.n	8000a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b94      	ldr	r3, [pc, #592]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a93      	ldr	r2, [pc, #588]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b91      	ldr	r3, [pc, #580]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a42:	2301      	movs	r3, #1
 8000a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	4b8e      	ldr	r3, [pc, #568]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d118      	bne.n	8000a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a52:	4b8b      	ldr	r3, [pc, #556]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a8a      	ldr	r2, [pc, #552]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fbcd 	bl	80001fc <HAL_GetTick>
 8000a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a64:	e008      	b.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a66:	f7ff fbc9 	bl	80001fc <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b64      	cmp	r3, #100	; 0x64
 8000a72:	d901      	bls.n	8000a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a74:	2303      	movs	r3, #3
 8000a76:	e0fd      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a78:	4b81      	ldr	r3, [pc, #516]	; (8000c80 <HAL_RCC_OscConfig+0x4f8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f0      	beq.n	8000a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d106      	bne.n	8000a9a <HAL_RCC_OscConfig+0x312>
 8000a8c:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6213      	str	r3, [r2, #32]
 8000a98:	e02d      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x334>
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a75      	ldr	r2, [pc, #468]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	6213      	str	r3, [r2, #32]
 8000aae:	4b73      	ldr	r3, [pc, #460]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a72      	ldr	r2, [pc, #456]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	f023 0304 	bic.w	r3, r3, #4
 8000ab8:	6213      	str	r3, [r2, #32]
 8000aba:	e01c      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	2b05      	cmp	r3, #5
 8000ac2:	d10c      	bne.n	8000ade <HAL_RCC_OscConfig+0x356>
 8000ac4:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6213      	str	r3, [r2, #32]
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a69      	ldr	r2, [pc, #420]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6213      	str	r3, [r2, #32]
 8000adc:	e00b      	b.n	8000af6 <HAL_RCC_OscConfig+0x36e>
 8000ade:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	4a66      	ldr	r2, [pc, #408]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6213      	str	r3, [r2, #32]
 8000aea:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	4a63      	ldr	r2, [pc, #396]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000af0:	f023 0304 	bic.w	r3, r3, #4
 8000af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d015      	beq.n	8000b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afe:	f7ff fb7d 	bl	80001fc <HAL_GetTick>
 8000b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b04:	e00a      	b.n	8000b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b06:	f7ff fb79 	bl	80001fc <HAL_GetTick>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d901      	bls.n	8000b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e0ab      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0ee      	beq.n	8000b06 <HAL_RCC_OscConfig+0x37e>
 8000b28:	e014      	b.n	8000b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fb67 	bl	80001fc <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b30:	e00a      	b.n	8000b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fb63 	bl	80001fc <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d901      	bls.n	8000b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e095      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b48:	4b4c      	ldr	r3, [pc, #304]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1ee      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d105      	bne.n	8000b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b5a:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a47      	ldr	r2, [pc, #284]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8081 	beq.w	8000c72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b70:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d061      	beq.n	8000c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d146      	bne.n	8000c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fb37 	bl	80001fc <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b92:	f7ff fb33 	bl	80001fc <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e067      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f0      	bne.n	8000b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a1b      	ldr	r3, [r3, #32]
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d108      	bne.n	8000bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bba:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	492d      	ldr	r1, [pc, #180]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a19      	ldr	r1, [r3, #32]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	4927      	ldr	r1, [pc, #156]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000be0:	4313      	orrs	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bea:	f7ff fb07 	bl	80001fc <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bf0:	e008      	b.n	8000c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bf2:	f7ff fb03 	bl	80001fc <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e037      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f0      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x46a>
 8000c10:	e02f      	b.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_RCC_OscConfig+0x4fc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff faf0 	bl	80001fc <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c20:	f7ff faec 	bl	80001fc <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e020      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x498>
 8000c3e:	e018      	b.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e013      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_RCC_OscConfig+0x4f4>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d106      	bne.n	8000c6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40007000 	.word	0x40007000
 8000c84:	42420060 	.word	0x42420060

08000c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e0d0      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d910      	bls.n	8000ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000caa:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 0207 	bic.w	r2, r3, #7
 8000cb2:	4965      	ldr	r1, [pc, #404]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cba:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e0b8      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d020      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4a58      	ldr	r2, [pc, #352]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cfc:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4a52      	ldr	r2, [pc, #328]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	494d      	ldr	r1, [pc, #308]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d040      	beq.n	8000da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d115      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e07f      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d107      	bne.n	8000d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d46:	4b41      	ldr	r3, [pc, #260]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d109      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e073      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e06b      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f023 0203 	bic.w	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4936      	ldr	r1, [pc, #216]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d78:	f7ff fa40 	bl	80001fc <HAL_GetTick>
 8000d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7e:	e00a      	b.n	8000d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d80:	f7ff fa3c 	bl	80001fc <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e053      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 020c 	and.w	r2, r3, #12
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d1eb      	bne.n	8000d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d210      	bcs.n	8000dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 0207 	bic.w	r2, r3, #7
 8000dbe:	4922      	ldr	r1, [pc, #136]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e032      	b.n	8000e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4916      	ldr	r1, [pc, #88]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d009      	beq.n	8000e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	490e      	ldr	r1, [pc, #56]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e16:	f000 f821 	bl	8000e5c <HAL_RCC_GetSysClockFreq>
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_RCC_ClockConfig+0x1c8>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1cc>)
 8000e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_RCC_ClockConfig+0x1d0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f99e 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	08001fd0 	.word	0x08001fd0
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000

08000e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e5c:	b490      	push	{r4, r7}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e64:	1d3c      	adds	r4, r7, #4
 8000e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d002      	beq.n	8000e9c <HAL_RCC_GetSysClockFreq+0x40>
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d003      	beq.n	8000ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8000e9a:	e02d      	b.n	8000ef8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e9e:	623b      	str	r3, [r7, #32]
      break;
 8000ea0:	e02d      	b.n	8000efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eae:	4413      	add	r3, r2
 8000eb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	0c5b      	lsrs	r3, r3, #17
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ece:	4413      	add	r3, r2
 8000ed0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ed4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eda:	fb02 f203 	mul.w	r2, r2, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee6:	e004      	b.n	8000ef2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	623b      	str	r3, [r7, #32]
      break;
 8000ef6:	e002      	b.n	8000efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000efa:	623b      	str	r3, [r7, #32]
      break;
 8000efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000efe:	6a3b      	ldr	r3, [r7, #32]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc90      	pop	{r4, r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	08001fbc 	.word	0x08001fbc
 8000f10:	08001fcc 	.word	0x08001fcc
 8000f14:	40021000 	.word	0x40021000
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	003d0900 	.word	0x003d0900

08000f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f38:	f7ff fff2 	bl	8000f20 <HAL_RCC_GetHCLKFreq>
 8000f3c:	4601      	mov	r1, r0
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08001fe0 	.word	0x08001fe0

08000f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_RCC_GetHCLKFreq>
 8000f64:	4601      	mov	r1, r0
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	0adb      	lsrs	r3, r3, #11
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	08001fe0 	.word	0x08001fe0

08000f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <RCC_Delay+0x34>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <RCC_Delay+0x38>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0a5b      	lsrs	r3, r3, #9
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fa0:	bf00      	nop
  }
  while (Delay --);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	60fa      	str	r2, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f9      	bne.n	8000fa0 <RCC_Delay+0x1c>
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	10624dd3 	.word	0x10624dd3

08000fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e076      	b.n	80010c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fe2:	d009      	beq.n	8000ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
 8000fea:	e005      	b.n	8000ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d106      	bne.n	8001018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fea2 	bl	8001d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800102e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	431a      	orrs	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107c:	ea42 0103 	orr.w	r1, r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f002 0204 	and.w	r2, r2, #4
 800109e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69da      	ldr	r2, [r3, #28]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d110      	bne.n	8001104 <HAL_SPI_Receive_IT+0x3c>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010ea:	d10b      	bne.n	8001104 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2204      	movs	r2, #4
 80010f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 f882 	bl	8001204 <HAL_SPI_TransmitReceive_IT>
 8001100:	4603      	mov	r3, r0
 8001102:	e076      	b.n	80011f2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_SPI_Receive_IT+0x4a>
 800110e:	2302      	movs	r3, #2
 8001110:	e06f      	b.n	80011f2 <HAL_SPI_Receive_IT+0x12a>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d002      	beq.n	800112c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001126:	2302      	movs	r3, #2
 8001128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800112a:	e05d      	b.n	80011e8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_SPI_Receive_IT+0x70>
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800113c:	e054      	b.n	80011e8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2204      	movs	r2, #4
 8001142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	88fa      	ldrh	r2, [r7, #6]
 8001156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2200      	movs	r2, #0
 8001168:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_SPI_Receive_IT+0x134>)
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
 8001184:	e002      	b.n	800118c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_SPI_Receive_IT+0x138>)
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001194:	d10f      	bne.n	80011b6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80011c4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	2b40      	cmp	r3, #64	; 0x40
 80011d2:	d008      	beq.n	80011e6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e000      	b.n	80011e8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80011e6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800152f 	.word	0x0800152f
 8001200:	080014e5 	.word	0x080014e5

08001204 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_SPI_TransmitReceive_IT+0x20>
 8001220:	2302      	movs	r3, #2
 8001222:	e075      	b.n	8001310 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001232:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800123a:	7dbb      	ldrb	r3, [r7, #22]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00d      	beq.n	800125c <HAL_SPI_TransmitReceive_IT+0x58>
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001246:	d106      	bne.n	8001256 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <HAL_SPI_TransmitReceive_IT+0x52>
 8001250:	7dbb      	ldrb	r3, [r7, #22]
 8001252:	2b04      	cmp	r3, #4
 8001254:	d002      	beq.n	800125c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001256:	2302      	movs	r3, #2
 8001258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800125a:	e054      	b.n	8001306 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001272:	e048      	b.n	8001306 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b04      	cmp	r3, #4
 800127e:	d003      	beq.n	8001288 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_SPI_TransmitReceive_IT+0x118>)
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
 80012c6:	e005      	b.n	80012d4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_SPI_TransmitReceive_IT+0x120>)
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <HAL_SPI_TransmitReceive_IT+0x124>)
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80012e2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ee:	2b40      	cmp	r3, #64	; 0x40
 80012f0:	d008      	beq.n	8001304 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e000      	b.n	8001306 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001304:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800130e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	08001427 	.word	0x08001427
 8001320:	08001487 	.word	0x08001487
 8001324:	08001363 	.word	0x08001363
 8001328:	080013c7 	.word	0x080013c7

0800132c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f103 020c 	add.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800138a:	b29b      	uxth	r3, r3
 800138c:	3b01      	subs	r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001398:	b29b      	uxth	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013ac:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f9d3 	bl	8001764 <SPI_CloseRxTx_ISR>
    }
  }
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	330c      	adds	r3, #12
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800140c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001412:	b29b      	uxth	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9a3 	bl	8001764 <SPI_CloseRxTx_ISR>
    }
  }
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001438:	b292      	uxth	r2, r2
 800143a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	1c9a      	adds	r2, r3, #2
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001458:	b29b      	uxth	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800146c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f973 	bl	8001764 <SPI_CloseRxTx_ISR>
    }
  }
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	1c9a      	adds	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10f      	bne.n	80014dc <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014ca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f944 	bl	8001764 <SPI_CloseRxTx_ISR>
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f103 020c 	add.w	r2, r3, #12
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800150c:	b29b      	uxth	r3, r3
 800150e:	3b01      	subs	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800151a:	b29b      	uxth	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f993 	bl	800184c <SPI_CloseRx_ISR>
  }
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001540:	b292      	uxth	r2, r2
 8001542:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	1c9a      	adds	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f970 	bl	800184c <SPI_CloseRx_ISR>
  }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001584:	f7fe fe3a 	bl	80001fc <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	4413      	add	r3, r2
 8001592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001594:	f7fe fe32 	bl	80001fc <HAL_GetTick>
 8001598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	015b      	lsls	r3, r3, #5
 80015a0:	0d1b      	lsrs	r3, r3, #20
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80015aa:	e054      	b.n	8001656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b2:	d050      	beq.n	8001656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80015b4:	f7fe fe22 	bl	80001fc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d902      	bls.n	80015ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d13d      	bne.n	8001646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80015d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015e2:	d111      	bne.n	8001608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ec:	d004      	beq.n	80015f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f6:	d107      	bne.n	8001608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001610:	d10f      	bne.n	8001632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e017      	b.n	8001676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3b01      	subs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	429a      	cmp	r2, r3
 8001672:	d19b      	bne.n	80015ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001698:	d111      	bne.n	80016be <SPI_EndRxTransaction+0x3a>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a2:	d004      	beq.n	80016ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d107      	bne.n	80016be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016c6:	d117      	bne.n	80016f8 <SPI_EndRxTransaction+0x74>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d0:	d112      	bne.n	80016f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff ff49 	bl	8001574 <SPI_WaitFlagStateUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01a      	beq.n	800171e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e013      	b.n	8001720 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2200      	movs	r2, #0
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff ff36 	bl	8001574 <SPI_WaitFlagStateUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e000      	b.n	8001720 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2200      	movs	r2, #0
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff ff18 	bl	8001574 <SPI_WaitFlagStateUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e000      	b.n	800175c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <SPI_CloseRxTx_ISR+0xe0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a35      	ldr	r2, [pc, #212]	; (8001848 <SPI_CloseRxTx_ISR+0xe4>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0a5b      	lsrs	r3, r3, #9
 8001778:	2264      	movs	r2, #100	; 0x64
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001780:	f7fe fd3c 	bl	80001fc <HAL_GetTick>
 8001784:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0220 	bic.w	r2, r2, #32
 8001794:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80017a8:	e009      	b.n	80017be <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0eb      	beq.n	8001796 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	2164      	movs	r1, #100	; 0x64
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffb0 	bl	8001728 <SPI_EndRxTxTransaction>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 0220 	orr.w	r2, r3, #32
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d115      	bne.n	800182c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b04      	cmp	r3, #4
 800180a:	d107      	bne.n	800181c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fd89 	bl	800132c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800181a:	e00e      	b.n	800183a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fd8a 	bl	800133e <HAL_SPI_TxRxCpltCallback>
}
 800182a:	e006      	b.n	800183a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd8b 	bl	8001350 <HAL_SPI_ErrorCallback>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	057619f1 	.word	0x057619f1

0800184c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001862:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001864:	f7fe fcca 	bl	80001fc <HAL_GetTick>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	2164      	movs	r1, #100	; 0x64
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff08 	bl	8001684 <SPI_EndRxTransaction>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f043 0220 	orr.w	r2, r3, #32
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10a      	bne.n	80018a4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fd39 	bl	800132c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80018ba:	e002      	b.n	80018c2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fd47 	bl	8001350 <HAL_SPI_ErrorCallback>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e03f      	b.n	800195c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d106      	bne.n	80018f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fa7d 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2224      	movs	r2, #36	; 0x24
 80018fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800190c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f828 	bl	8001964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001932:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001942:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800199e:	f023 030c 	bic.w	r3, r3, #12
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <UART_SetConfig+0x114>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d103      	bne.n	80019d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019cc:	f7ff fac6 	bl	8000f5c <HAL_RCC_GetPCLK2Freq>
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	e002      	b.n	80019da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019d4:	f7ff faae 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 80019d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	009a      	lsls	r2, r3, #2
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <UART_SetConfig+0x118>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	0119      	lsls	r1, r3, #4
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <UART_SetConfig+0x118>)
 8001a12:	fba3 0302 	umull	r0, r3, r3, r2
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	fb00 f303 	mul.w	r3, r0, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	3332      	adds	r3, #50	; 0x32
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <UART_SetConfig+0x118>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a30:	4419      	add	r1, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	009a      	lsls	r2, r3, #2
 8001a3c:	441a      	add	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <UART_SetConfig+0x118>)
 8001a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2064      	movs	r0, #100	; 0x64
 8001a52:	fb00 f303 	mul.w	r3, r0, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	3332      	adds	r3, #50	; 0x32
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <UART_SetConfig+0x118>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	440a      	add	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	51eb851f 	.word	0x51eb851f

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a86:	f7fe fb61 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8a:	f000 f825 	bl	8001ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8e:	f000 f8c9 	bl	8001c24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a92:	f000 f867 	bl	8001b64 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001a96:	f000 f89b 	bl	8001bd0 <MX_USART1_UART_Init>

  uint8_t test_CS;

  int test;

  flag = 0;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <main+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  test_CS = HAL_GPIO_ReadPin(SPI_CS_GPIO_Port, SPI_CS_Pin);
	  if(flag == 1)
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <main+0x4c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d1fb      	bne.n	8001aa0 <main+0x20>
	  {
		  flag = 0;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <main+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab2:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <main+0x50>)
 8001ab4:	f7fe fe2c 	bl	8000710 <HAL_GPIO_TogglePin>
		  HAL_SPI_Receive_IT(&hspi1, &spiRecBuf, 3);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2203      	movs	r2, #3
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <main+0x54>)
 8001ac0:	f7ff fb02 	bl	80010c8 <HAL_SPI_Receive_IT>
		  test = 9;
 8001ac4:	2309      	movs	r3, #9
 8001ac6:	60fb      	str	r3, [r7, #12]
	  if(flag == 1)
 8001ac8:	e7ea      	b.n	8001aa0 <main+0x20>
 8001aca:	bf00      	nop
 8001acc:	2000002c 	.word	0x2000002c
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	20000070 	.word	0x20000070

08001ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b090      	sub	sp, #64	; 0x40
 8001adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	2228      	movs	r2, #40	; 0x28
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fa54 	bl	8001f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b16:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fe31 	bl	8000788 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b2c:	f000 f8de 	bl	8001cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f89c 	bl	8000c88 <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b56:	f000 f8c9 	bl	8001cec <Error_Handler>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3740      	adds	r7, #64	; 0x40
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <MX_SPI1_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b96:	2208      	movs	r2, #8
 8001b98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bae:	220a      	movs	r2, #10
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_SPI1_Init+0x64>)
 8001bb4:	f7ff fa04 	bl	8000fc0 <HAL_SPI_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8001bbe:	f000 f895 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000070 	.word	0x20000070
 8001bcc:	40013000 	.word	0x40013000

08001bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <MX_USART1_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c08:	f7ff fe5f 	bl	80018ca <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f000 f86b 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000030 	.word	0x20000030
 8001c20:	40013800 	.word	0x40013800

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_GPIO_Init+0xb8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <MX_GPIO_Init+0xbc>)
 8001c88:	f7fe fd2a 	bl	80006e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_GPIO_Init+0xbc>)
 8001ca6:	f7fe fbc1 	bl	800042c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001caa:	2310      	movs	r3, #16
 8001cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_GPIO_Init+0xc0>)
 8001cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <MX_GPIO_Init+0xc4>)
 8001cbe:	f7fe fbb5 	bl	800042c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f7fe fb79 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f7fe fb92 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	10210000 	.word	0x10210000
 8001ce8:	40010800 	.word	0x40010800

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_MspInit+0x60>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_MspInit+0x60>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000

08001d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_SPI_MspInit+0x88>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12f      	bne.n	8001ddc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_SPI_MspInit+0x8c>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dac:	23a0      	movs	r3, #160	; 0xa0
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dc0:	f7fe fb34 	bl	800042c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <HAL_SPI_MspInit+0x90>)
 8001dd8:	f7fe fb28 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013000 	.word	0x40013000
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010800 	.word	0x40010800

08001df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_UART_MspInit+0x8c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d131      	bne.n	8001e74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_UART_MspInit+0x90>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <HAL_UART_MspInit+0x94>)
 8001e56:	f7fe fae9 	bl	800042c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_MspInit+0x94>)
 8001e70:	f7fe fadc 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40013800 	.word	0x40013800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010800 	.word	0x40010800

08001e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <HardFault_Handler+0x4>

08001e9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <MemManage_Handler+0x4>

08001ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <BusFault_Handler+0x4>

08001ea6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <UsageFault_Handler+0x4>

08001eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed4:	f7fe f980 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001ee0:	2010      	movs	r0, #16
 8001ee2:	f7fe fc2f 	bl	8000744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  extern int flag;
  flag = 1;
 8001ee6:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <EXTI4_IRQHandler+0x14>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000002c 	.word	0x2000002c

08001ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f02:	e003      	b.n	8001f0c <LoopCopyDataInit>

08001f04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f0a:	3104      	adds	r1, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f14:	d3f6      	bcc.n	8001f04 <CopyDataInit>
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f18:	e002      	b.n	8001f20 <LoopFillZerobss>

08001f1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f1c:	f842 3b04 	str.w	r3, [r2], #4

08001f20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f24:	d3f9      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f26:	f7ff ffe5 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f000 f80f 	bl	8001f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff fda7 	bl	8001a80 <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r3, =_sidata
 8001f34:	08001ff0 	.word	0x08001ff0
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001f40:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001f44:	200000c8 	.word	0x200000c8

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <__libc_init_array>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	2500      	movs	r5, #0
 8001f50:	4e0c      	ldr	r6, [pc, #48]	; (8001f84 <__libc_init_array+0x38>)
 8001f52:	4c0d      	ldr	r4, [pc, #52]	; (8001f88 <__libc_init_array+0x3c>)
 8001f54:	1ba4      	subs	r4, r4, r6
 8001f56:	10a4      	asrs	r4, r4, #2
 8001f58:	42a5      	cmp	r5, r4
 8001f5a:	d109      	bne.n	8001f70 <__libc_init_array+0x24>
 8001f5c:	f000 f822 	bl	8001fa4 <_init>
 8001f60:	2500      	movs	r5, #0
 8001f62:	4e0a      	ldr	r6, [pc, #40]	; (8001f8c <__libc_init_array+0x40>)
 8001f64:	4c0a      	ldr	r4, [pc, #40]	; (8001f90 <__libc_init_array+0x44>)
 8001f66:	1ba4      	subs	r4, r4, r6
 8001f68:	10a4      	asrs	r4, r4, #2
 8001f6a:	42a5      	cmp	r5, r4
 8001f6c:	d105      	bne.n	8001f7a <__libc_init_array+0x2e>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f74:	4798      	blx	r3
 8001f76:	3501      	adds	r5, #1
 8001f78:	e7ee      	b.n	8001f58 <__libc_init_array+0xc>
 8001f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f7e:	4798      	blx	r3
 8001f80:	3501      	adds	r5, #1
 8001f82:	e7f2      	b.n	8001f6a <__libc_init_array+0x1e>
 8001f84:	08001fe8 	.word	0x08001fe8
 8001f88:	08001fe8 	.word	0x08001fe8
 8001f8c:	08001fe8 	.word	0x08001fe8
 8001f90:	08001fec 	.word	0x08001fec

08001f94 <memset>:
 8001f94:	4603      	mov	r3, r0
 8001f96:	4402      	add	r2, r0
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <memset+0xa>
 8001f9c:	4770      	bx	lr
 8001f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa2:	e7f9      	b.n	8001f98 <memset+0x4>

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
